# === Step 0: Import Required Libraries ===
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Set visual style
sns.set(style="whitegrid")

# === Step 1: Load and Inspect the Dataset ===
df = pd.read_csv("titanic.csv")  # Make sure the file exists in your working directory

# Clean column names: lowercase and replace spaces with underscores
df.columns = [col.strip().replace(' ', '_').lower() for col in df.columns]

# Display the first few rows of the dataset
print("First 5 Rows of the Dataset:")
print(df.head())

# General info about dataset
print("\nDataset Info:")
print(df.info())

# Statistical summary of numerical columns
print("\nSummary Statistics:")
print(df.describe())

# === Step 2: Exploratory Data Analysis (EDA) ===

# Check for missing values
print("\nMissing Values:")
print(df.isnull().sum())

# Visualize missing values
plt.figure(figsize=(10, 6))
sns.heatmap(df.isnull(), cbar=False, cmap='viridis')
plt.title("Missing Values Heatmap")
plt.show()

# Plot distribution of target variable
sns.countplot(data=df, x='survived', palette='Set2')
plt.title("Survival Count")
plt.xlabel("Survived (0 = No, 1 = Yes)")
plt.ylabel("Count")
plt.show()

# Gender distribution by survival
sns.countplot(data=df, x='sex', hue='survived', palette='Set1')
plt.title("Survival by Gender")
plt.xlabel("Sex")
plt.ylabel("Count")
plt.legend(title='Survived', loc='upper right')
plt.show()

# Distribution of age
plt.figure(figsize=(10, 5))
sns.histplot(data=df, x='age', bins=30, kde=True)
plt.title("Age Distribution")
plt.show()

# Boxplot of age by survival status
sns.boxplot(data=df, x='survived', y='age', palette='coolwarm')
plt.title("Age vs Survival")
plt.show()

# Correlation heatmap (numerical columns only)
plt.figure(figsize=(8, 5))
sns.heatmap(df.corr(numeric_only=True), annot=True, cmap='coolwarm', fmt=".2f")
plt.title("Feature Correlation Heatmap")
plt.show()

# === Step 3: Data Cleaning and Preprocessing ===

# Fill missing 'age' values with median
df['age'].fillna(df['age'].median(), inplace=True)

# Fill missing 'embarked' values with mode
df['embarked'].fillna(df['embarked'].mode()[0], inplace=True)

# === Step 4: Encode Categorical Features ===

# Encode 'sex' and 'embarked' columns
le_sex = LabelEncoder()
le_embarked = LabelEncoder()

df['sex'] = le_sex.fit_transform(df['sex'])          # male=1, female=0
df['embarked'] = le_embarked.fit_transform(df['embarked'])  # Mapping like C=0, Q=1, S=2 (may vary)

# === Step 5: Select Features and Target ===

features = ['pclass', 'sex', 'age', 'sibsp', 'parch', 'fare', 'embarked']
X = df[features]
y = df['survived']

# === Step 6: Train-Test Split ===

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.3, random_state=42)

# === Step 7: Train Decision Tree Classifier ===

clf = DecisionTreeClassifier(
    max_depth=4,
    min_samples_leaf=4,
    random_state=42
)
clf.fit(X_train, y_train)

# === Step 8: Evaluate Model ===

y_pred = clf.predict(X_test)

print("\nModel Accuracy:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# Plot confusion matrix
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(6, 4))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',
            xticklabels=['Not Survived', 'Survived'],
            yticklabels=['Not Survived', 'Survived'])
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()

# === Step 9: Visualize the Decision Tree ===

plt.figure(figsize=(20, 10))
plot_tree(clf,
          filled=True,
          feature_names=features,
          class_names=["Not Survived", "Survived"],
          rounded=True)
plt.title("Decision Tree Visualization")
plt.show()