# === Step 1: Import Required Libraries ===
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# === Step 2: Load Dataset ===
df = pd.read_csv("car.csv")  # Ensure the file is in your working directory

# === Step 3: Clean Column Names ===
df.columns = [col.strip().replace(' ', '_').lower() for col in df.columns]

# === Step 4: Initial Exploration ===
print("First 5 Rows:")
print(df.head())

print("\nDataset Info:")
print(df.info())

print("\nMissing Values:")
print(df.isnull().sum())

print("\nClass Distribution:")
print(df['class'].value_counts())

# === Step 5: Visual Exploratory Data Analysis (EDA) ===

# Countplot of target variable
sns.countplot(data=df, x='class', order=df['class'].value_counts().index)
plt.title("Target Class Distribution")
plt.xticks(rotation=45)
plt.show()

# Compare safety level across classes
plt.figure(figsize=(8, 5))
sns.countplot(data=df, x='safety', hue='class')
plt.title("Safety vs Class")
plt.show()

# Compare buying price with class
plt.figure(figsize=(8, 5))
sns.countplot(data=df, x='buying', hue='class')
plt.title("Buying Price vs Class")
plt.show()

# === Step 6: Encode Categorical Variables ===
label_encoders = {}

for col in df.columns:
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col])
    label_encoders[col] = le  # Store for inverse_transform if needed later

# === Step 7: Feature and Target Selection ===
X = df.drop('class', axis=1)
y = df['class']

# === Step 8: Train-Test Split ===
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.3, random_state=42
)

# === Step 9: Train Decision Tree Classifier ===
clf = DecisionTreeClassifier(
    max_depth=5,
    min_samples_leaf=5,
    random_state=42
)
clf.fit(X_train, y_train)

# === Step 10: Evaluate Model ===
y_pred = clf.predict(X_test)

print("\nModel Accuracy:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# === Step 11: Confusion Matrix ===
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',
            xticklabels=label_encoders['class'].classes_,
            yticklabels=label_encoders['class'].classes_)
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()

# === Step 12: Visualize Decision Tree ===
plt.figure(figsize=(20, 10))
plot_tree(
    clf,
    filled=True,
    feature_names=X.columns,
    class_names=label_encoders['class'].classes_,
    rounded=True
)
plt.title("Decision Tree - Car Evaluation Dataset")
plt.show()
